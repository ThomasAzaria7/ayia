!function(t,n){"object"==typeof exports&&"undefined"!=typeof module?n(exports,require("@angular/core"),require("rxjs"),require("rxjs/operators")):"function"==typeof define&&define.amd?define("ngx-paypal",["exports","@angular/core","rxjs","rxjs/operators"],n):n(t["ngx-paypal"]={},t.ng.core,t.rxjs,t.rxjs.operators)}(this,function(t,n,e,o){"use strict";var i={Card:0,Credit:1,Elv:2};i[i.Card]="Card",i[i.Credit]="Credit",i[i.Elv]="Elv";var a={ClientSideREST:0,ServerSideREST:1};a[a.ClientSideREST]="ClientSideREST",a[a.ServerSideREST]="ServerSideREST";var r=function(){function t(){this.useGlobalConfig=!1,this.registerPayPalScriptWhenContainerIsReady=!1,this.defaultPollInterval=50,this.maximumPollWaitTime=5e3,this.paypalWindowName="paypal",this.paypalWindowScriptInitiated="ngx-paypal-script-initiated",this.paypalScriptUrl="https://www.paypalobjects.com/api/checkout.js",this.payPalButtonContainerIdPrefix="ngx-paypal-button-container-",this.ngUnsubscribe=new e.Subject}return Object.defineProperty(t.prototype,"payPalButtonContainerElem",{set:function(t){t&&(this._payPalButtonContainerElem=t)},enumerable:!0,configurable:!0}),t.prototype.ngOnChanges=function(t){this.config&&this.initPayPal()},t.prototype.ngAfterViewInit=function(){this.registerPayPalScriptWhenContainerIsReady&&this._payPalButtonContainerElem&&(this.setupScript(),this.registerPayPalScriptWhenContainerIsReady=!1)},t.prototype.ngOnDestroy=function(){this.ngUnsubscribe.next(),this.ngUnsubscribe.complete()},t.prototype.initPayPal=function(){this.payPalButtonContainerId=""+this.payPalButtonContainerIdPrefix+this.getPseudoUniqueNumber(),window[this.paypalWindowName]?this.handleScriptRegistering():!0===window[this.paypalWindowScriptInitiated]?this.pollUntilScriptAvailable():(window[this.paypalWindowScriptInitiated]=!0,this.addPayPalScriptToPage())},t.prototype.getPseudoUniqueNumber=function(){return(new Date).valueOf()},t.prototype.pollUntilScriptAvailable=function(){var n=this,i=e.interval(this.defaultPollInterval).pipe(o.takeUntil(this.ngUnsubscribe),o.map(function(t){if(t>=n.maximumPollWaitTime)return console.warn("PayPal script was not loaded after '"+n.maximumPollWaitTime+"' maximum polling time."),void i.unsubscribe();window[n.paypalWindowName]&&(n.handleScriptRegistering(),i.unsubscribe())})).subscribe()},t.prototype.addPayPalScriptToPage=function(){var t=this,n=document.createElement("script");n.innerHTML="",n.src=this.paypalScriptUrl,n.onload=function(){return t.handleScriptRegistering()},n.async=!0,n.defer=!0,this.paypalScriptElem.nativeElement.appendChild(n)},t.prototype.handleScriptRegistering=function(){this._payPalButtonContainerElem&&this._payPalButtonContainerElem.nativeElement&&this._payPalButtonContainerElem.nativeElement.id===this.payPalButtonContainerId?this.setupScript():this.registerPayPalScriptWhenContainerIsReady=!0},t.prototype.setupScript=function(){var i=this;if(!this._payPalButtonContainerElem)throw Error("Cannot setup script because paypal button container with id '"+this.payPalButtonContainerId+"' is not yet ready");if(this._payPalButtonContainerElem.nativeElement.innerHTML="",!window[this.paypalWindowName])throw Error("PayPal script is not available");window[this.paypalWindowName].Button.render({env:this.config.environment.toString(),commit:this.config.commit,client:this.getClient(),style:this.config.button,funding:this.getFunding(),payment:function(t,n){if(i.config.integrationType===a.ServerSideREST){if(!i.config.payment)throw Error("You need set up a create payment method and return\n                            PayPal's payment id when using server side integration");return i.config.payment().toPromise().then(function(t){return t})}if(i.config.integrationType===a.ClientSideREST){if(!i.config.transactions||!Array.isArray(i.config.transactions)||i.config.transactions.length<=0)throw Error("You need to provide at least 1 transaction for client side integration");return n.payment.create({payment:{transactions:i.config.transactions}})}},onAuthorize:function(t,n){if(i.config.integrationType===a.ServerSideREST){if(!i.config.onAuthorize)throw Error("You need set up an execute method when using server side integration");return i.config.onAuthorize(t,n).toPromise()}if(i.config.integrationType===a.ClientSideREST)return n.payment.execute().then(function(){if(!i.config.onPaymentComplete)throw Error("You should provide some callback when payment is finished when using client side integration");i.config.onPaymentComplete(t,n)})},onError:function(t){i.config.onError&&i.config.onError(t)},onCancel:function(t,n){i.config.onCancel&&i.config.onCancel(t,n)},onClick:function(){i.config.onClick&&i.config.onClick()},validate:function(t){i.config.validate&&i.config.validate(t)}},"#"+this.payPalButtonContainerId)},t.prototype.getClient=function(){if(this.config.integrationType!==a.ClientSideREST)return undefined;if(!this.config.client)throw Error("You need to setup client information when using client side integration");return{production:this.config.client.production,sandbox:this.config.client.sandbox}},t.prototype.getFunding=function(){var n=this;if(!this.config.funding)return undefined;var i=[],e=[];return this.config.funding.allowed&&this.config.funding.allowed.forEach(function(t){i.push(n.mapFundingType(t))}),this.config.funding.disallowed&&this.config.funding.disallowed.forEach(function(t){e.push(n.mapFundingType(t))}),{allowed:i,disallowed:e}},t.prototype.mapFundingType=function(t){if(t===i.Card)return paypal.FUNDING.CARD;if(t===i.Credit)return paypal.FUNDING.CREDIT;if(t===i.Elv)return paypal.FUNDING.ELV;throw Error("Unsupported funding type '"+t+"'")},t.decorators=[{type:n.Component,args:[{changeDetection:n.ChangeDetectionStrategy.OnPush,selector:"ngx-paypal",template:'\n    <div #payPalScriptElem></div>\n    <div #payPalButtonContainerElem [id]="payPalButtonContainerId"></div>\n    '}]}],t.ctorParameters=function(){return[]},t.propDecorators={config:[{type:n.Input}],useGlobalConfig:[{type:n.Input}],paypalScriptElem:[{type:n.ViewChild,args:["payPalScriptElem"]}],payPalButtonContainerElem:[{type:n.ViewChild,args:["payPalButtonContainerElem"]}]},t}(),p=function(){function t(){}return t.decorators=[{type:n.NgModule,args:[{imports:[],declarations:[r],exports:[r]}]}],t}(),s=function l(t,n,i){this.integrationType=t,this.environment=n,this.commit=!0,Object.assign(this,i)};t.NgxPayPalModule=p,t.PayPalEnvironment={Sandbox:"sandbox",Production:"production"},t.PayPalFunding=i,t.PayPalIntegrationType=a,t.PayPalConfig=s,t.NgxPaypalComponent=r,t.Éµa=r,Object.defineProperty(t,"__esModule",{value:!0})});
//# sourceMappingURL=ngx-paypal.umd.min.js.map